/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as FernDefinition from "../../../../api/index";
import * as core from "../../../../core";
import { WebhookMethodSchema } from "./WebhookMethodSchema";
import { HttpHeaderSchema } from "../../service/types/HttpHeaderSchema";
import { WebhookPayloadSchema } from "./WebhookPayloadSchema";
import { ExampleWebhookCallSchema } from "../../examples/types/ExampleWebhookCallSchema";
import { WithAvailability } from "../../commons/types/WithAvailability";
import { WithAudiences } from "../../commons/types/WithAudiences";
import { WithDocs } from "../../commons/types/WithDocs";

export const WebhookSchema: core.serialization.ObjectSchema<
    serializers.WebhookSchema.Raw,
    FernDefinition.WebhookSchema
> = core.serialization
    .object({
        method: WebhookMethodSchema,
        headers: core.serialization.record(core.serialization.string(), HttpHeaderSchema).optional(),
        payload: WebhookPayloadSchema,
        examples: core.serialization.list(ExampleWebhookCallSchema).optional(),
    })
    .extend(WithAvailability)
    .extend(WithAudiences)
    .extend(WithDocs);

export declare namespace WebhookSchema {
    interface Raw extends WithAvailability.Raw, WithAudiences.Raw, WithDocs.Raw {
        method: WebhookMethodSchema.Raw;
        headers?: Record<string, HttpHeaderSchema.Raw> | null;
        payload: WebhookPayloadSchema.Raw;
        examples?: ExampleWebhookCallSchema.Raw[] | null;
    }
}
