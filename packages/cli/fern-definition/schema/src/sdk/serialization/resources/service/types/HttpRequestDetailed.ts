/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as FernDefinition from "../../../../api/index";
import * as core from "../../../../core";
import { HttpQueryParameterSchema } from "./HttpQueryParameterSchema";
import { HttpHeader } from "./HttpHeader";
import { HttpRequestBody } from "./HttpRequestBody";
import { WithName } from "../../commons/types/WithName";
import { WithDocs } from "../../commons/types/WithDocs";

export const HttpRequestDetailed: core.serialization.ObjectSchema<
    serializers.HttpRequestDetailed.Raw,
    FernDefinition.HttpRequestDetailed
> = core.serialization
    .object({
        contentType: core.serialization.property("content-type", core.serialization.string().optional()),
        queryParameters: core.serialization.property(
            "query-parameters",
            core.serialization.record(core.serialization.string(), HttpQueryParameterSchema).optional()
        ),
        headers: core.serialization.record(core.serialization.string(), HttpHeader).optional(),
        body: HttpRequestBody.optional(),
    })
    .extend(WithName)
    .extend(WithDocs);

export declare namespace HttpRequestDetailed {
    interface Raw extends WithName.Raw, WithDocs.Raw {
        "content-type"?: string | null;
        "query-parameters"?: Record<string, HttpQueryParameterSchema.Raw> | null;
        headers?: Record<string, HttpHeader.Raw> | null;
        body?: HttpRequestBody.Raw | null;
    }
}
