/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as FernDefinition from "../../../../api/index";
import * as core from "../../../../core";
import { TypeReference } from "../../types/types/TypeReference";
import { ServiceTransport } from "./ServiceTransport";
import { Source } from "./Source";
import { Endpoint } from "./Endpoint";
import { WithDisplayName } from "../../commons/types/WithDisplayName";

export const HttpService: core.serialization.ObjectSchema<serializers.HttpService.Raw, FernDefinition.HttpService> =
    core.serialization
        .object({
            auth: core.serialization.boolean(),
            url: core.serialization.string().optional(),
            basePath: core.serialization.property("base-path", core.serialization.string().optional()),
            pathParameters: core.serialization.property(
                "path-parameters",
                core.serialization.record(core.serialization.string(), core.serialization.string()).optional()
            ),
            idempotent: core.serialization.boolean().optional(),
            headers: core.serialization.record(core.serialization.string(), TypeReference).optional(),
            transport: ServiceTransport.optional(),
            source: Source.optional(),
            endpoints: core.serialization.record(core.serialization.string(), Endpoint).optional(),
        })
        .extend(WithDisplayName);

export declare namespace HttpService {
    interface Raw extends WithDisplayName.Raw {
        auth: boolean;
        url?: string | null;
        "base-path"?: string | null;
        "path-parameters"?: Record<string, string> | null;
        idempotent?: boolean | null;
        headers?: Record<string, TypeReference.Raw> | null;
        transport?: ServiceTransport.Raw | null;
        source?: Source.Raw | null;
        endpoints?: Record<string, Endpoint.Raw> | null;
    }
}
